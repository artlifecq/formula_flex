<?xml version="1.0" encoding="utf-8"?>
<!---
*
* 预览场景面板
* @author L.L.M.Sunny
* 创建时间：2015-6-17 上午10:30:12
*
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 resize="group1_resizeHandler(event)"
		 creationComplete="group1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.editor.cfg.ConfigData;
			import com.editor.cfg.GlobalConfig;
			import com.editor.cfg.GlobalSettingConfig;
			import com.editor.cfg.ProjectConfig;
			import com.editor.data.ConfigDesc;
			import com.editor.data.InternalTabelName;
			import com.editor.data.RenderUnitID;
			import com.editor.data.RenderUnitType;
			import com.editor.data.TabelData;
			import com.editor.events.AvatarPreviewEvent;
			import com.editor.manager.AppManager;
			import com.editor.manager.AvatarPreviewManager;
			import com.editor.manager.DataStructuresManager;
			import com.editor.manager.SceneRoleManager;
			import com.editor.scene.SceneRole;
			import com.editor.utils.RoleFaceMaskEffectUtil;
			import com.game.engine3D.scene.render.RenderUnit3D;

			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.events.SliderEvent;

			import org.client.mainCore.manager.EventManager;


			private var _container : UIComponent;
			private var _areaShape : Sprite;

			protected function group1_resizeHandler(event : ResizeEvent) : void
			{
				AppManager.getInstance().viewResize();
				SceneRoleManager.getInstance().updatePreviewState();
			}

			protected function scaleSlider_changeHandler(event : SliderEvent) : void
			{
				var scale : Number = scaleSlider.value;
				AvatarPreviewManager.setScale(scale, true);
			}

			private function dataTipFormatFunction(value : Number) : String
			{
				return value.toFixed(2);
			}

			protected function angleSlider_changeHandler(event : SliderEvent) : void
			{
				AvatarPreviewManager.setRotationY(angleSlider.value, true);
			}

			protected function speedSlider_changeHandler(event : SliderEvent) : void
			{
				AvatarPreviewManager.setAnimationSpeed(speedSlider.value, true);
			}

			protected function group1_creationCompleteHandler(event : FlexEvent) : void
			{
				EventManager.addEvent(AvatarPreviewEvent.SET_ROTATION_Y, setRotationYHandler);
				EventManager.addEvent(AvatarPreviewEvent.SET_SCALE, setScaleHandler);
				EventManager.addEvent(AvatarPreviewEvent.SET_ANIMATION_SPEED, setAnimationSpeedHandler);

				_container = new UIComponent();
				this.addElement(_container);
				_container.mouseEnabled = false;
				_container.mouseChildren = true;

				_areaShape = new Sprite();
				_areaShape.graphics.beginFill(0, 0);
				_areaShape.graphics.drawRect(0, 0, 256, 256);
				_areaShape.graphics.endFill();
				_areaShape.graphics.lineStyle(1, 0x00FF00);
				_areaShape.graphics.moveTo(0, 0);
				_areaShape.graphics.lineTo(256, 0);
				_areaShape.graphics.lineTo(256, 256);
				_areaShape.graphics.lineTo(0, 256);
				_areaShape.graphics.lineTo(0, 0);
				_areaShape.graphics.lineStyle(1, 0xFFFF00);
				_areaShape.graphics.moveTo(0, 128);
				_areaShape.graphics.lineTo(256, 128);
				_areaShape.graphics.moveTo(128, 0);
				_areaShape.graphics.lineTo(128, 256);
				_areaShape.graphics.lineStyle(1, 0x0000FF, 0.3);
				for (var i : int = 1; i <= 6; i++)
				{
					_areaShape.graphics.moveTo(0, 128 - i * 20);
					_areaShape.graphics.lineTo(256, 128 - i * 20);
					_areaShape.graphics.moveTo(128 - i * 20, 0);
					_areaShape.graphics.lineTo(128 - i * 20, 256);

					_areaShape.graphics.moveTo(0, 128 + i * 20);
					_areaShape.graphics.lineTo(256, 128 + i * 20);
					_areaShape.graphics.moveTo(128 + i * 20, 0);
					_areaShape.graphics.lineTo(128 + i * 20, 256);
				}
				_container.addChild(_areaShape);
				_areaShape.x = RoleFaceMaskEffectUtil.fixAreaShapeX;
				_areaShape.y = RoleFaceMaskEffectUtil.fixAreaShapeY;
				_areaShape.visible = false;
				_areaShape.buttonMode = true;
				_areaShape.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);

				referenImgContainer.width = 0;
				referenImgContainer.height = 0;
				referenImgContainer.source = null;
				maskImgContainer.source = null;

				referenImgContainer.addEventListener(Event.COMPLETE, onReferenImgComplete);
			}

			private function setRotationYHandler(value : int) : void
			{
				angleSlider.value = value;
				SceneRoleManager.getInstance().previewEntity.rotationY = angleSlider.value;
			}

			private function setScaleHandler(value : Number) : void
			{
				scaleSlider.value = value;
				SceneRoleManager.getInstance().previewEntity.setScale(value);
			}

			private function setAnimationSpeedHandler(value : Number) : void
			{
				speedSlider.value = value;
				var bodyRender : RenderUnit3D = SceneRoleManager.getInstance().previewEntity.avatar.getRenderUnitByID(RenderUnitType.BODY, RenderUnitID.BODY);
				if (bodyRender)
					bodyRender.animateSpeed = value;
			}

			protected function fadeEffectMode_clickHandler(event : MouseEvent) : void
			{
				referenImgContainer.width = 0;
				referenImgContainer.height = 0;
				referenImgContainer.source = null;

				var setting : GlobalSettingConfig = null;
				var tabel : TabelData = DataStructuresManager.getInstance().getTabel(InternalTabelName.GlobalSettingConfigName);
				if (tabel)
				{
					var desc : ConfigDesc = tabel.getConfigDesc();
					var datas : Array = ConfigData.getCfgByFieldValue(desc, "key", "DEFAULT_SETTING");
					if (datas.length > 0)
					{
						setting = datas[0];
					}
				}

				var role : SceneRole = SceneRoleManager.getInstance().previewEntity;
				if (fadeEffectMode2.selected)
				{
					RoleFaceMaskEffectUtil.faceMaskEffectType = 1;
					_areaShape.visible = true;
					referenImgContainer.source = ProjectConfig.dialogFaceMaskReferenPath;
					maskImgContainer.source = GlobalConfig.getDynTextureFilePath("dialogFaceMask");

					if (setting)
					{
						RoleFaceMaskEffectUtil.currAreaShapeX = maskImgContainer.x = _areaShape.x = setting.mDialogFaceOffsetX + RoleFaceMaskEffectUtil.fixAreaShapeX;
						RoleFaceMaskEffectUtil.currAreaShapeY = maskImgContainer.y = _areaShape.y = setting.mDialogFaceOffsetY + RoleFaceMaskEffectUtil.fixAreaShapeY;
					}
				}
				else if (fadeEffectMode3.selected)
				{
					RoleFaceMaskEffectUtil.faceMaskEffectType = 2;
					_areaShape.visible = true;
					referenImgContainer.source = ProjectConfig.headFaceMaskReferenPath;
					maskImgContainer.source = GlobalConfig.getDynTextureFilePath("headFaceMask");

					if (setting)
					{
						RoleFaceMaskEffectUtil.currAreaShapeX = maskImgContainer.x = _areaShape.x = setting.mHeadFaceOffsetX + RoleFaceMaskEffectUtil.fixAreaShapeX;
						RoleFaceMaskEffectUtil.currAreaShapeY = maskImgContainer.y = _areaShape.y = setting.mHeadFaceOffsetY + RoleFaceMaskEffectUtil.fixAreaShapeY;
					}
				}
				else if (fadeEffectMode4.selected)
				{
					RoleFaceMaskEffectUtil.faceMaskEffectType = 3;
					_areaShape.visible = true;
					referenImgContainer.source = ProjectConfig.bossHeadFaceMaskReferenPath;
					maskImgContainer.source = GlobalConfig.getDynTextureFilePath("bossHeadFaceMask");

					if (setting)
					{
						RoleFaceMaskEffectUtil.currAreaShapeX = maskImgContainer.x = _areaShape.x = setting.mBossHeadFaceOffsetX + RoleFaceMaskEffectUtil.fixAreaShapeX;
						RoleFaceMaskEffectUtil.currAreaShapeY = maskImgContainer.y = _areaShape.y = setting.mBossHeadFaceOffsetY + RoleFaceMaskEffectUtil.fixAreaShapeY;
					}
				}
				else
				{
					RoleFaceMaskEffectUtil.faceMaskEffectType = 0;
					_areaShape.visible = false;
					referenImgContainer.source = null;
					maskImgContainer.source = null;
				}
				SceneRoleManager.getInstance().updatePreviewState();
			}

			private function onReferenImgComplete(event : Event) : void
			{
				referenImgContainer.width = referenImgContainer.bitmapData.width;
				referenImgContainer.height = referenImgContainer.bitmapData.height;
			}

			private function mouseDownHandler(event : MouseEvent) : void
			{
				_areaShape.startDrag(false, new Rectangle(0, 0, this.width, this.height));
				_areaShape.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveHandler);
				stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
			}

			private function mouseUpHandler(event : MouseEvent) : void
			{
				_areaShape.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveHandler);
				_areaShape.stopDrag();
			}

			private function onMouseMoveHandler(event : MouseEvent) : void
			{
				RoleFaceMaskEffectUtil.currAreaShapeX = maskImgContainer.x = _areaShape.x;
				RoleFaceMaskEffectUtil.currAreaShapeY = maskImgContainer.y = _areaShape.y;
				setOffsetConfigData();
				SceneRoleManager.getInstance().updatePreviewState();
			}

			private function setOffsetConfigData() : void
			{
				maskImgContainer.x = _areaShape.x = RoleFaceMaskEffectUtil.currAreaShapeX;
				maskImgContainer.y = _areaShape.y = RoleFaceMaskEffectUtil.currAreaShapeY;
				var tabel : TabelData = DataStructuresManager.getInstance().getTabel(InternalTabelName.GlobalSettingConfigName);
				if (tabel)
				{
					var desc : ConfigDesc = tabel.getConfigDesc();
					var datas : Array = ConfigData.getCfgByFieldValue(desc, "key", "DEFAULT_SETTING");
					if (datas.length > 0)
					{
						var setting : GlobalSettingConfig = datas[0];
						if (RoleFaceMaskEffectUtil.faceMaskEffectType == 1)
						{
							setting.setValue("dialogFaceOffset", (RoleFaceMaskEffectUtil.currAreaShapeX - RoleFaceMaskEffectUtil.fixAreaShapeX) + "," + (RoleFaceMaskEffectUtil.currAreaShapeY - RoleFaceMaskEffectUtil.fixAreaShapeY));
						}
						else if (RoleFaceMaskEffectUtil.faceMaskEffectType == 2)
						{
							setting.setValue("headFaceOffset", (RoleFaceMaskEffectUtil.currAreaShapeX - RoleFaceMaskEffectUtil.fixAreaShapeX) + "," + (RoleFaceMaskEffectUtil.currAreaShapeY - RoleFaceMaskEffectUtil.fixAreaShapeY));
						}
						else if (RoleFaceMaskEffectUtil.faceMaskEffectType == 3)
						{
							setting.setValue("bossHeadFaceOffset", (RoleFaceMaskEffectUtil.currAreaShapeX - RoleFaceMaskEffectUtil.fixAreaShapeX) + "," + (RoleFaceMaskEffectUtil.currAreaShapeY - RoleFaceMaskEffectUtil.fixAreaShapeY));
						}
					}
				}
			}
		]]>
	</fx:Script>
	<s:Label x="20"
			 y="10"
			 text="缩放:" color="#ffffff"
			 verticalAlign="middle">
		<s:filters>
			<s:GlowFilter color="0"
						  alpha="1"
						  strength="2"
						  quality="1">
			</s:GlowFilter>
		</s:filters>
	</s:Label>
	<mx:Slider id="scaleSlider"
			   x="50"
			   y="10"
			   minimum="0.1"
			   maximum="2"
			   labels="{[0.1,1,2]}"
			   labelOffset="30"
			   value="1" tickColor="#ffffff"
			   liveDragging="true"
			   dataTipFormatFunction="{dataTipFormatFunction}"
			   change="scaleSlider_changeHandler(event)"/>
	<s:Label x="20"
			 y="40"
			 text="角度:" color="#ffffff"
			 verticalAlign="middle">
		<s:filters>
			<s:GlowFilter color="0"
						  alpha="1"
						  strength="2"
						  quality="1">
			</s:GlowFilter>
		</s:filters>
	</s:Label>
	<mx:Slider id="angleSlider"
			   x="50"
			   y="40"
			   minimum="0"
			   maximum="360"
			   labels="{[0,180,360]}"
			   labelOffset="30"
			   value="0" tickColor="#ffffff"
			   liveDragging="true"
			   dataTipFormatFunction="{dataTipFormatFunction}"
			   change="angleSlider_changeHandler(event)"/>
	<s:Label x="20"
			 y="70"
			 text="速度:" color="#ffffff"
			 verticalAlign="middle">
		<s:filters>
			<s:GlowFilter color="0"
						  alpha="1"
						  strength="2"
						  quality="1">
			</s:GlowFilter>
		</s:filters>
	</s:Label>
	<mx:Slider id="speedSlider"
			   x="50"
			   y="70"
			   minimum="0.1"
			   maximum="5"
			   labels="{[0.1,1,5]}"
			   labelOffset="30"
			   value="1" tickColor="#ffffff"
			   liveDragging="true"
			   change="speedSlider_changeHandler(event)"/>
	<s:RadioButton id="fadeEffectMode1"
				   x="270"
				   y="10"
				   label="正常模式" color="#ffffff"
				   groupName="fadeEffectMode"
				   selected="true"
				   click="fadeEffectMode_clickHandler(event)">
	</s:RadioButton>
	<s:RadioButton id="fadeEffectMode2"
				   x="270"
				   y="30"
				   label="半身模式" color="#ffffff"
				   groupName="fadeEffectMode"
				   click="fadeEffectMode_clickHandler(event)">
	</s:RadioButton>
	<s:RadioButton id="fadeEffectMode3"
				   x="270"
				   y="50"
				   label="头像模式" color="#ffffff"
				   groupName="fadeEffectMode"
				   click="fadeEffectMode_clickHandler(event)">
	</s:RadioButton>
	<s:RadioButton id="fadeEffectMode4"
				   x="270"
				   y="70"
				   label="Boss头像模式" color="#ffffff"
				   groupName="fadeEffectMode"
				   click="fadeEffectMode_clickHandler(event)">
	</s:RadioButton>
	<s:Image id="referenImgContainer"
			 width="100%"
			 height="100%"
			 fillMode="clip"
			 x="{RoleFaceMaskEffectUtil.fixAreaShapeX}"
			 y="{RoleFaceMaskEffectUtil.fixAreaShapeY}"
			 alpha="0.3"
			 backgroundAlpha="0"
			 backgroundColor="0x666666">
	</s:Image>
	<s:Image id="maskImgContainer"
			 width="256"
			 height="256"
			 x="{RoleFaceMaskEffectUtil.fixAreaShapeX}"
			 y="{RoleFaceMaskEffectUtil.fixAreaShapeY}"
			 alpha="0.2"
			 backgroundAlpha="0"
			 backgroundColor="0x666666">
	</s:Image>
</s:Group>
