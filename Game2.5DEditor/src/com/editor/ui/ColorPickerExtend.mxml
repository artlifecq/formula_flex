<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 removedFromStage="removedFromStageHandler(event)">

	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import flash.filters.BitmapFilterQuality;
			import flash.filters.GlowFilter;

			public var glowFilters : Array = [new GlowFilter(0xFF00, 1, 5, 5, 2, BitmapFilterQuality.LOW)];

			private var _showAlpha : Boolean = false;

			private var _selectedColor : uint;

			private var _colorSetFromColorPicker : Boolean;
			private var _alphaSetFromColorPicker : Boolean;

			[Bindable]
			public function get selectedColor() : uint
			{
				return _selectedColor;
			}

			public function set selectedColor(value : uint) : void
			{
				_selectedColor = value;
				if (ColorBoard.isShowing && ColorBoard.instance.colorChangeCallback == colorChangeHandler && !_colorSetFromColorPicker)
				{
					graphic1_clickHandler(null);
				}
				updateToolTip();
			}

			private var _selectedAlpha : Number = -1;

			[Bindable]
			public function get selectedAlpha() : Number
			{
				return _selectedAlpha;
			}

			public function set selectedAlpha(value : Number) : void
			{
				_selectedAlpha = value;
				_showAlpha = true;
				if (ColorBoard.isShowing && ColorBoard.instance.colorChangeCallback == colorChangeHandler && !_alphaSetFromColorPicker)
				{
					graphic1_clickHandler(null);
				}
				updateToolTip();
			}

			private function colorChangeHandler(color : uint) : void
			{
				_colorSetFromColorPicker = true;
				selectedColor = color;
				_colorSetFromColorPicker = false;
				this.dispatchEvent(new Event(Event.CHANGE));
			}

			private function alphaChangeHandler(alpha : Number) : void
			{
				_alphaSetFromColorPicker = true;
				selectedAlpha = alpha;
				_alphaSetFromColorPicker = false;
				this.dispatchEvent(new Event(Event.CHANGE));
			}

			protected function graphic1_clickHandler(event : MouseEvent) : void
			{
				if (_showAlpha)
					ColorBoard.show(colorChangeHandler, _selectedColor, alphaChangeHandler, _selectedAlpha);
				else
					ColorBoard.show(colorChangeHandler, _selectedColor, null, _selectedAlpha);
			}

			protected function graphic1_mouseOverHandler(event : MouseEvent) : void
			{
				gr.filters = glowFilters;
			}

			protected function gr_mouseOutHandler(event : MouseEvent) : void
			{
				gr.filters = null;
			}

			protected function removedFromStageHandler(event : Event) : void
			{
				if (ColorBoard.isShowing && ColorBoard.instance.colorChangeCallback == colorChangeHandler)
				{
					ColorBoard.hide();
				}
			}

			private function updateToolTip() : void
			{
				var toolTipStr : String = "color: #" + _selectedColor.toString(16);
				if (_showAlpha)
				{
					toolTipStr += " alpha: " + _selectedAlpha;
				}
				this.toolTip = toolTipStr;
			}
		]]>
	</fx:Script>
	<s:Graphic id="gr"
			   click="graphic1_clickHandler(event)"
			   buttonMode="true"
			   useHandCursor="true"
			   mouseOver="graphic1_mouseOverHandler(event)"
			   mouseOut="gr_mouseOutHandler(event)">
		<s:Rect width="18"
				height="18">
			<s:stroke>
				<s:SolidColorStroke weight="3"
									color="#5f5f5f"
									alpha="0.85"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="{selectedColor}"/>
			</s:fill>
		</s:Rect>
	</s:Graphic>
</s:Group>
